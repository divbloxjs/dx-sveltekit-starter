generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_account {
  id                Int                 @id @default(autoincrement())
  last_name         String?             @db.VarChar(150)
  username          String              @unique(map: "userAccountUsername") @db.VarChar(250)
  first_name        String?             @db.VarChar(100)
  email_address     String              @db.VarChar(250)
  hashed_password   String?             @db.VarChar(100)
  last_updated      DateTime            @default(now()) @db.DateTime(0)
  user_role_id      Int?
  push_subscription push_subscription[]
  user_role         user_role?          @relation(fields: [user_role_id], references: [id], map: "423b4e4321253537640cf95f33c36b61")
  user_session      user_session[]

  @@index([user_role_id], map: "061ef044873abcf5ce235d2ea7c07399")
}

model user_role {
  id           Int            @id @default(autoincrement())
  role_name    String         @db.VarChar(100)
  last_updated DateTime       @default(now()) @db.DateTime(0)
  user_account user_account[]
}

model user_session {
  id                  Int           @id @default(autoincrement())
  session_id          String        @unique(map: "userSessionSessionid") @db.VarChar(50)
  user_agent          String?       @db.VarChar(200)
  session_data        Json
  expires_at          DateTime      @db.DateTime(0)
  duration_in_minutes Int
  last_updated        DateTime      @default(now()) @db.DateTime(0)
  user_account_id     Int?
  user_account        user_account? @relation(fields: [user_account_id], references: [id], map: "c914b3bbb55c0ee0bae6d8a43468b571")

  @@index([user_account_id], map: "a6d3b1ba7c64d9f2c316489532292daf")
}

model file {
  id                          Int     @id @default(autoincrement())
  category                    String  @db.VarChar(300)
  mime_type                   String? @db.VarChar(150)
  sizes_saved                 Json
  base_file_url               String  @db.VarChar(1000)
  display_name                String  @db.VarChar(500)
  linked_entity               String? @db.VarChar(150)
  linked_entity_id            BigInt?
  object_identifier           String? @db.VarChar(500)
  original_size_in_bytes      Int
  uploaded_file_extension     String? @db.VarChar(150)
  cloud_container_identifier  String? @db.VarChar(150)
  cloud_is_publicly_available Boolean @default(false)
}

model one_time_token {
  id                      Int      @id @default(autoincrement())
  expires_at              DateTime @db.DateTime(0)
  token_type              String   @db.VarChar(100)
  token_value             String   @unique(map: "oneTimeTokenTokenValue") @db.VarChar(32)
  linked_entity_id        BigInt
  linked_entity_name      String   @db.VarChar(100)
  time_to_live_in_minutes Int
  last_updated            DateTime @default(now()) @db.DateTime(0)
}

model push_subscription {
  id                        Int           @id @default(autoincrement())
  is_active                 Boolean       @default(true)
  unique_identifier         String?       @unique(map: "pushSubscriptionUniqueIdentifier") @db.VarChar(50)
  has_unseen_notification   Boolean       @default(false)
  push_subscription_details Json?
  last_updated              DateTime      @default(now()) @db.DateTime(0)
  user_account_id           Int?
  user_account              user_account? @relation(fields: [user_account_id], references: [id], map: "c6cd234e927bdc157034c0b7287faf2b")

  @@index([user_account_id], map: "c6cd234e927bdc157034c0b7287faf2b")
}
