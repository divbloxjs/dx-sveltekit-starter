generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model file {
  id                          BigInt  @id @default(autoincrement())
  category                    String  @db.VarChar(300)
  mime_type                   String? @db.VarChar(150)
  sizes_saved                 Json
  base_file_url               String  @db.VarChar(1000)
  display_name                String  @db.VarChar(500)
  linked_entity               String? @db.VarChar(150)
  linked_entity_id            BigInt?
  object_identifier           String? @db.VarChar(500)
  original_size_in_bytes      Int
  uploaded_file_extension     String? @db.VarChar(150)
  cloud_container_identifier  String? @db.VarChar(150)
  cloud_is_publicly_available Boolean @default(false)
}

model one_time_token {
  id                      BigInt   @id @default(autoincrement())
  expires_at              DateTime @db.DateTime(0)
  token_type              String   @db.VarChar(100)
  token_value             String   @unique(map: "oneTimeTokenTokenValue") @db.VarChar(32)
  linked_entity_id        BigInt
  linked_entity_name      String   @db.VarChar(100)
  time_to_live_in_minutes Int
  last_updated            DateTime @default(now()) @db.DateTime(0)
}

model push_subscription {
  id                        BigInt        @id @default(autoincrement())
  is_active                 Boolean       @default(true)
  unique_identifier         String?       @unique(map: "pushSubscriptionUniqueIdentifier") @db.VarChar(50)
  has_unseen_notification   Boolean       @default(false)
  push_subscription_details Json?
  last_updated              DateTime      @default(now()) @db.DateTime(0)
  user_account_id           BigInt?
  user_account              user_account? @relation(fields: [user_account_id], references: [id], map: "a6830a6bd021bfd9a7dcc48677959e08")

  @@index([user_account_id], map: "a6830a6bd021bfd9a7dcc48677959e08")
}

model user_account {
  id                BigInt              @id @default(autoincrement())
  last_name         String?             @db.VarChar(150)
  username          String              @unique(map: "userAccountUsername") @db.VarChar(250)
  first_name        String?             @db.VarChar(100)
  email_address     String              @db.VarChar(250)
  hashed_password   String?             @db.VarChar(100)
  last_updated      DateTime            @default(now()) @db.DateTime(0)
  user_role_id      BigInt?
  push_subscription push_subscription[]
  task              task[]
  user_role         user_role?          @relation(fields: [user_role_id], references: [id], map: "423b4e4321253537640cf95f33c36b61")
  user_session      user_session[]

  @@index([user_role_id], map: "423b4e4321253537640cf95f33c36b61")
}

model user_role {
  id           BigInt         @id @default(autoincrement())
  role_name    String         @db.VarChar(100)
  last_updated DateTime       @default(now()) @db.DateTime(0)
  user_account user_account[]
}

model user_session {
  id                  BigInt        @id @default(autoincrement())
  session_id          String        @unique(map: "userSessionSessionid") @db.VarChar(50)
  user_agent          String?       @db.VarChar(200)
  session_data        Json
  duration_in_minutes Int
  last_updated        DateTime      @default(now()) @db.DateTime(0)
  user_account_id     BigInt?
  expires_at          DateTime?     @db.DateTime(0)
  user_account        user_account? @relation(fields: [user_account_id], references: [id], map: "f298f8a9edb939a04c156fac7189a080")

  @@index([user_account_id], map: "f298f8a9edb939a04c156fac7189a080")
}

model category {
  id            BigInt   @id @default(autoincrement())
  last_updated  DateTime @default(now()) @db.DateTime(0)
  category_name String   @db.VarChar(100)
  task          task[]
}

model task {
  id            BigInt        @id @default(autoincrement())
  status        task_status   @default(New)
  due_date      DateTime      @db.Date
  description   String        @db.Text
  last_updated  DateTime      @default(now()) @db.DateTime(0)
  task_name     String        @db.VarChar(250)
  task_category BigInt?
  task_user     BigInt?
  user_account  user_account? @relation(fields: [task_user], references: [id], map: "785ff9ec6c2b64dc1075a305510093b1")
  category      category?     @relation(fields: [task_category], references: [id], map: "9ff056361fdfe76adfb6c873e332884e")

  @@index([task_user], map: "6a2ec3545e0b3033139f5ca499ccb45f")
  @@index([task_category], map: "b905bdf98d9cee79421fb4b774f410e4")
}

model grand_parent_organisation {
  id                         BigInt                @id @default(autoincrement())
  grand_parent_org_name      String?               @db.VarChar(150)
  grand_parent_org_date      DateTime?             @db.Date
  grand_parent_org_date_time DateTime?             @db.DateTime(0)
  grand_parent_org_number    Int?
  grand_parent_org_json      Json?
  last_updated               DateTime              @default(now()) @db.DateTime(0)
  parent_organisation        parent_organisation[]
}

model organisation {
  id                     BigInt               @id @default(autoincrement())
  org_name               String?              @db.VarChar(150)
  org_date               DateTime?            @db.Date
  org_date_time          DateTime?            @db.DateTime(0)
  org_number             Int?
  org_json               Json?
  status                 organisation_status  @default(New)
  last_updated           DateTime             @default(now()) @db.DateTime(0)
  parent_organisation_id BigInt?
  parent_organisation    parent_organisation? @relation(fields: [parent_organisation_id], references: [id], map: "a1c78e9bae0d701fac8a7de7ba507621")

  @@index([parent_organisation_id], map: "a1c78e9bae0d701fac8a7de7ba507621")
}

model parent_organisation {
  id                           BigInt                                @id @default(autoincrement())
  parent_org_name              String?                               @db.VarChar(150)
  parent_org_date              DateTime?                             @db.Date
  parent_org_date_time         DateTime?                             @db.DateTime(0)
  parent_org_number            Int?
  parent_org_json              Json?
  parent_org_status            parent_organisation_parent_org_status @default(New)
  last_updated                 DateTime                              @default(now()) @db.DateTime(0)
  grand_parent_organisation_id BigInt?
  organisation                 organisation[]
  grand_parent_organisation    grand_parent_organisation?            @relation(fields: [grand_parent_organisation_id], references: [id], map: "9ec03c8c90dd50a1f141fa75e4b3598b")

  @@index([grand_parent_organisation_id], map: "9ec03c8c90dd50a1f141fa75e4b3598b")
}

enum task_status {
  New
  In_Progress @map("In Progress")
  Completed
}

enum organisation_status {
  New
  In_Progress @map("In Progress")
  Completed
}

enum parent_organisation_parent_org_status {
  New
  In_Progress @map("In Progress")
  Completed
}
